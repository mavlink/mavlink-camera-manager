use std::{fs, io::Write, path::Path};

use regex::Regex;
use ts_rs::TS;

#[path = "../src/lib/stream/webrtc/signalling_protocol.rs"]
mod signalling_protocol;

use crate::signalling_protocol::*;

fn main() {
    // Generate all typescript bindings and join them into a single String
    let bindings = [
        Message::export_to_string().unwrap(),
        Answer::export_to_string().unwrap(),
        Question::export_to_string().unwrap(),
        Negotiation::export_to_string().unwrap(),
        BindOffer::export_to_string().unwrap(),
        BindAnswer::export_to_string().unwrap(),
        PeerIdAnswer::export_to_string().unwrap(),
        Stream::export_to_string().unwrap(),
        IceNegotiation::export_to_string().unwrap(),
        MediaNegotiation::export_to_string().unwrap(),
        EndSessionQuestion::export_to_string().unwrap(),
    ]
    .join("\n\n");

    // Remove all typescript "import type" because all types are going to live in the same typescritp file
    let re = Regex::new(r"(?m)^import type .*\n").unwrap();
    let bindings = re.replace_all(bindings.as_str(), "").to_string();

    // Replace all notices by a custom one
    let re = Regex::new(r"(?m)^// This file was generated by .*\n\n").unwrap();
    let mut bindings = re.replace_all(bindings.as_str(), "").to_string();
    let custom_notice_str = "// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs) during `cargo build` step. Do not edit this file manually.\n\n";
    bindings.insert_str(0, custom_notice_str);

    // Export to file
    let output_dir = Path::new("./src/lib/stream/webrtc/frontend/bindings/");
    if !output_dir.exists() {
        std::fs::create_dir_all(output_dir).unwrap();
    }
    let bindings_file_path = output_dir.join(Path::new("signalling_protocol.d.ts"));
    let mut bindings_file = fs::File::create(bindings_file_path).unwrap();
    bindings_file.write_all(bindings.as_bytes()).unwrap();
}
